{"version":3,"sources":["xml2json.js"],"names":[],"mappingsfile":"index.js","sourcesContent":[";(function(root){\r\n\r\n  function Parser(xmlString) {\r\n    this.xmlString = xmlString;\r\n    this.cursor = -1;\r\n    this.error = false;\r\n    this.jsonObj = {};\r\n    this.readDeclaration();\r\n    this.startReadNode();\r\n  }\r\n\r\n  Parser.prototype.readDeclaration = function(){\r\n    this.cursor = this.xmlString.indexOf('?>');\r\n    if (this.xmlString.indexOf('<!DOCTYPE') > -1) {\r\n      this.cursor = this.xmlString.indexOf(']>') + 2;\r\n    }\r\n    this.next();\r\n  };\r\n\r\n  Parser.prototype.startReadNode = function(){\r\n    Object.assign(this.jsonObj, this.readNode());\r\n  };\r\n\r\n  Parser.prototype.readNode = function(sibling){\r\n    var parent, node = {}, text, nextTest = /^[\\s\\n]*<(?!\\/|!\\[CDATA\\[)/,\r\n      openTagStop = this.xmlString.indexOf('>', this.cursor),\r\n      openTag = this.readTag(this.xmlString.substring(this.cursor, openTagStop));\r\n\r\n    Object.assign(node, openTag.nodeAttr);\r\n    parent = {[openTag.nodeName]: node};\r\n    this.cursor = openTagStop + 1; // '>'.length\r\n\r\n    // not closed\r\n    if (this.xmlString.indexOf('/>', this.cursor - 2) !== this.cursor - 2) {\r\n      // child\r\n      if (nextTest.test(this.xmlString.substring(this.cursor, this.cursor + 1024))) {\r\n        this.next();\r\n        Object.assign(node, this.readNode());\r\n      }\r\n\r\n      // text node\r\n      text = this.readText(openTag.nodeName);\r\n      if (text && !/^\\s+$/.test(text)) node['#text'] = text;\r\n    }\r\n\r\n    // sibling\r\n    if (nextTest.test(this.xmlString.substring(this.cursor, this.cursor + 1024))) {\r\n      this.next();\r\n      this.addChildren(sibling || parent, this.readNode(sibling || parent));\r\n    }\r\n    return parent;\r\n  };\r\n\r\n  Parser.prototype.readTag = function(tag){\r\n    var nodeName = tag.split(/\\s+/)[0], nodeAttr = {}, result = null,\r\n        patt = /([^\\s]+)=(['\"])([^\"']+?)(\\2)|([^\\s]+)=([^\\s\"']+)/g;\r\n    while ((result = patt.exec(tag)) !== null) {\r\n      if (result[1]) {\r\n        nodeAttr['@' + result[1]] = transEntities(result[3]);\r\n      } else if (result[5]) {\r\n        nodeAttr['@' + result[5]] = transEntities(result[6]);\r\n      }\r\n    }\r\n    return {nodeName, nodeAttr};\r\n  };\r\n\r\n  Parser.prototype.addChildren = function(parent, child){\r\n    var k;\r\n    for (k in child) {\r\n      if (parent[k]) {\r\n        if (!(parent[k] instanceof Array)) {\r\n          parent[k] = [parent[k]];\r\n        }\r\n        parent[k].push(child[k]);\r\n      } else {\r\n        parent[k] = child[k];\r\n      }\r\n    }\r\n  };\r\n\r\n  Parser.prototype.readText = function(nodeName){\r\n    var text = '', start = this.cursor,\r\n      end = this.xmlString.indexOf('</' + nodeName + '>', start),\r\n      cdStart = -1, cdEnd;\r\n    if (end < 0) return text;\r\n    while ((cdStart = this.xmlString.indexOf('<![CDATA[', start)) > -1 && cdStart < end) {\r\n      text += transEntities(this.xmlString.substring(start, cdStart));\r\n      cdEnd = this.xmlString.indexOf(']]>', cdStart);\r\n      text += this.xmlString.substring(cdStart + 9, cdEnd);\r\n      start = cdEnd + 3;\r\n      end = this.xmlString.indexOf('</' + nodeName + '>', start);\r\n    }\r\n    text += transEntities(this.xmlString.substring(start, end));\r\n    this.cursor = end + nodeName.length + 3; //'</'.length + '>'.length = 3\r\n    return text;\r\n  };\r\n\r\n  Parser.prototype.next = function(){\r\n    var index = this.xmlString.indexOf('<', this.cursor);\r\n    this.cursor = this.xmlString.indexOf('<![CDATA[', index) === 0 ? this.cursor : index + 1;\r\n  };\r\n\r\n  Parser.prototype.toJson = function(){\r\n    return this.jsonObj;\r\n  };\r\n\r\n  function transEntities(str){\r\n    return str.replace(/&amp;/g, '&')\r\n      .replace(/&gt;/g, '>')\r\n      .replace(/&lt;/g, '<')\r\n      .replace(/&quot;/g, '\"')\r\n      .replace(/&apos;/g, '\\'');\r\n  }\r\n\r\n  function xml2json(xmlString) {\r\n    var parser = new Parser(xmlString);\r\n    if (!parser.error) {\r\n      return parser.toJson();\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function() {\r\n      return xml2json;\r\n    });\r\n  } else if (typeof module === 'object') {\r\n    module.exports = xml2json;\r\n  } else {\r\n    root.xml2json = xml2json;\r\n  }\r\n\r\n})(typeof global === 'object' && global || typeof window === 'object' && window || this);\r\n"]}